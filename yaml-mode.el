(require 'yaml-mode)

(defun yaml-mode-kill-entry ()
  (interactive)
  (back-to-indentation)
  (save-mark-and-excursion
    (let ((column (current-column))
          (times  (abs (or current-prefix-arg 1)))
          (max-point (buffer-size)))
      (dotimes (_ times)
        (move-beginning-of-line nil)
        (kill-whole-line)
        (back-to-indentation)
        (while (and (< (point) max-point)
                    (< column (current-column)))
          (move-beginning-of-line nil)
          (kill-whole-line)
          (back-to-indentation))))))

(defun yaml-mode-forward-heading-same-level ()
  (interactive)
  (back-to-indentation)
  (let ((direction (cl-signum (or current-prefix-arg 1)))
        (column    (current-column))
        (times     (abs (or current-prefix-arg 1)))
        (max-point (buffer-size)))
    (dotimes (_ times)
      (forward-line direction)
      (back-to-indentation)
      (while (and (< (point) max-point)
                  (> (point) 0)
                  (or (< column (current-column))
                      (not (symbol-at-point))))
        (forward-line direction)
        (back-to-indentation)))))

(defun yaml-mode-previous-heading-same-level ()
  (interactive)
  (let ((current-prefix-arg (- (or current-prefix-arg 1))))
    (call-interactively 'yaml-mode-forward-heading-same-level)))

(define-key yaml-mode-map (kbd "C-c C-k") 'yaml-mode-kill-entry)
(define-key yaml-mode-map (kbd "C-c C-f") 'yaml-mode-forward-heading-same-level)
(define-key yaml-mode-map (kbd "C-c C-b") 'yaml-mode-previous-heading-same-level)

